{
	"info": {
		"_postman_id": "b044659d-1655-4624-9bb0-2bf95fb4ae8c",
		"name": "BS API testing",
		"description": "Tests for BS API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41194091"
	},
	"item": [
		{
			"name": "Episode Endpoints",
			"item": [
				{
					"name": "Get Episode by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains an episode\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Episode_Id\", 1);",
									"    pm.expect(jsonData).to.have.property(\"Title\");",
									"    pm.expect(jsonData).to.have.property(\"Duration\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-episode-by-id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-episode-by-id",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Episodes by Series ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for valid series\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Episodes are returned when series exists\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.SeriesTitle).to.be.a('string');",
									"    pm.expect(response.Episodes).to.be.an('array');",
									"    pm.expect(response.Episodes.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"404 when series does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body(\"Series not found.\");",
									"});",
									"",
									"pm.test(\"404 when no episodes are found\", () => {",
									"    const response = pm.response.json();",
									"    if (response.message) {",
									"        pm.expect(response.message).to.equal(\"No episodes found for the given series.\");",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-episodes-by-series-id/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-episodes-by-series-id",
								"10"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Episodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Episodes have required fields\", () => {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property(\"Episode_Id\");",
									"        pm.expect(jsonData[0]).to.have.property(\"Title\");",
									"        pm.expect(jsonData[0]).to.have.property(\"Duration\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-episodes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-episodes"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Episode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is OK\", () => {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Episode_Id\": 1,\n  \"Media_Id\": 101,\n  \"Series_Id\": 10,\n  \"Season_Number\": 2,\n  \"Episode_Number\": 3,\n  \"Title\": \"Updated Episode Title\",\n  \"Duration\": 45\n}\n\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-episode-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-episode-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Episode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Episode deletion confirmation\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.eql(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-episode/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-episode",
								"10"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Episode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has success message\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.Message).to.eql(\"Episode created successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Title\": \"Pilot\",\r\n  \"Genre_Id\": 1,\r\n  \"Age_Rating\": \"PG-13\",\r\n  \"Quality\": \"HD\",\r\n  \"Series_Title\": \"Test Series\",\r\n  \"Series_Id\": 0,\r\n  \"Season_Number\": 1,\r\n  \"Episode_Number\": 1,\r\n  \"Duration\": 45\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-episode",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-episode"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genre Endpoints",
			"item": [
				{
					"name": "Get Genre by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected fields\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Genre_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Type\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-genre-by-id/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-genre-by-id",
								"3"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-genres",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-genres"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Genre_Id\": 1,\n  \"Type\": \"Adventure\"\n}\n\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-genre-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-genre-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-genre-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-genre-by-id",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Type\": \"Action\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-genre",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-genre"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invitation Endpoints",
			"item": [
				{
					"name": "Get Invitation by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected fields\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Invitation_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Inviter_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Invitee_Id\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-invitation-by-id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-invitation-by-id",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-invitations",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-invitations"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Invitation_Id\": 1,\n  \"Inviter_Id\": 1,\n  \"Invitee_Id\": 3\n}\n\n\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-invitation-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-invitation-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-invitation-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-invitation-by-id",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Inviter_Id\": 1,\r\n  \"Invitee_Id\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-invitation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-invitation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Media Endpoints",
			"item": [
				{
					"name": "Get Media by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains media details\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Media_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Genre_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Title\");",
									"    pm.expect(jsonData).to.have.property(\"Age_Rating\");",
									"    pm.expect(jsonData).to.have.property(\"Quality\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/get-media-by-id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"get-media-by-id",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains a list of media\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/get-media",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"get-media"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Media_Id\": 1,\n  \"Genre_Id\": 2,\n  \"Title\": \"Updated Title\",\n  \"Age_Rating\": \"PG-13\",\n  \"Quality\": \"HD\"\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-media-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-media-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Movie Endpoints",
			"item": [
				{
					"name": "Get Movie by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains movie details\", () => {",
									"    const movie = pm.response.json();",
									"    pm.expect(movie).to.have.property(\"Movie_Id\");",
									"    pm.expect(movie).to.have.property(\"Title\");",
									"    pm.expect(movie).to.have.property(\"Age_Rating\");",
									"    pm.expect(movie).to.have.property(\"Quality\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-movie-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-movie-by-id",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Movies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains an array\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-movies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-movies"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Movie_Id\": 1,\n  \"Has_Subtitles\": false\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-movie-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-movie-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains success message\", () => {",
									"    pm.expect(pm.response.json().Message).to.eql(\"Movie created successfully\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-movie/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-movie",
								"5"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Movie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", () => {\r",
									"    pm.expect(pm.response.json().Message).to.eql(\"Movie created successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Genre_Id\": 1,\r\n  \"Title\": \"Inception\",\r\n  \"Age_Rating\": \"PG-13\",\r\n  \"Quality\": \"HD\",\r\n  \"Has_Subtitles\": true\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-movie",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-movie"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Endpoints",
			"item": [
				{
					"name": "Get Profile by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains profile details\", () => {",
									"    const profile = pm.response.json();",
									"    pm.expect(profile).to.have.property(\"Profile_Id\");",
									"    pm.expect(profile).to.have.property(\"Account_Id\");",
									"    pm.expect(profile).to.have.property(\"Profile_Image\");",
									"    pm.expect(profile).to.have.property(\"Child_Profile\");",
									"    pm.expect(profile).to.have.property(\"User_Age\");",
									"    pm.expect(profile).to.have.property(\"Language\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-movie-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-movie-by-id",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains an array\", () => {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-profiles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-profiles"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Profile_Id\": 1,\n  \"Account_Id\": 1,\n  \"Profile_Image\": \"https://example.com/updated-image.jpg\",\n  \"Child_Profile\": false,\n  \"User_Age\": 25,\n  \"Language\": \"French\"\n}\n\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-profile-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-profile-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-profile-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-profile-by-id",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Account_Id\": 3,\r\n  \"Profile_Image\": \"https://example.com/image.jpg\",\r\n  \"Child_Profile\": true,\r\n  \"User_Age\": 10,\r\n  \"Language\": \"English\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Series Endpoints",
			"item": [
				{
					"name": "Get Series by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for valid series\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Series details are returned\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.Series_Id).to.be.a('number');",
									"    pm.expect(response.Title).to.be.a('string');",
									"    pm.expect(response.Age_Rating).to.be.a('string');",
									"});",
									"",
									"pm.test(\"404 when series does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body(\"Series not found.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-series-by-id/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-series-by-id",
								"10"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-series",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-series"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Series_Id\": 1,\n  \"Genre_Id\": 2,\n  \"Title\": \"Breaking Bad: The Final Season\",\n  \"Age_Rating\": \"TV-MA\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-series-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-series-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful deletion\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Series deleted successfully\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response.Message).to.equal(\"Series and related episodes deleted successfully.\");",
									"});",
									"",
									"pm.test(\"404 when series does not exist\", () => {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body(\"Series not found.\");",
									"});",
									"",
									"pm.test(\"500 when there is an error deleting series\", () => {",
									"    const response = pm.response.json();",
									"    if (response.Message) {",
									"        pm.expect(response.Message).to.contain(\"An error occurred\");",
									"    }",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-series/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-series",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Genre_Id\": 1,\r\n  \"Title\": \"Breaking Bad\",\r\n  \"Age_Rating\": \"TV-MA\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-series",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-series"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscription Endpoints",
			"item": [
				{
					"name": "Get Subscription by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-subscription-by-id/10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-subscription-by-id",
								"10"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-subscriptions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-subscriptions"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Subscription_Id\": 1,\n  \"Subscription_Price\": 11.99,\n  \"Type\": \"Premium\",\n  \"Start_Date\": \"2025-01-01\",\n  \"Renewal_Date\": \"2025-12-31\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-series-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-series-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-subscription-by-id/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-subscription-by-id",
								"3"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Account_Id\": 10,\r\n  \"Subscription_Price\": 9.99,\r\n  \"Type\": \"Premium\",\r\n  \"Start_Date\": \"2025-01-01\",\r\n  \"Renewal_Date\": \"2025-12-31\"\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-subscription",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-subscription"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subtitle Endpoints",
			"item": [
				{
					"name": "Get Subtitle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-subtitle-by-id/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-subtitle-by-id",
								"3"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Subtitles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-subtitles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-subtitles"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Subtitle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Media_Id\": 1,\r\n  \"Language\": \"English\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-subtitle",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-subtitle"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Subtitle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-subtitle-by-id/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-subtitle-by-id",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "WatchEndpoints",
			"item": [
				{
					"name": "Get Watch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for existing watch\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response contains the correct watch details\", () => {",
									"    pm.response.to.have.jsonBody({",
									"        \"Watch_Id\": 1,",
									"        \"Profile_Id\": 1,",
									"        \"Media_Id\": 101,",
									"        \"Watch_Date\": \"2025-01-24T10:00:00\",",
									"        \"Status\": \"Completed\",",
									"        \"Pause_Time\": 0",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-watch-by-id/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-watch-by-id",
								"5"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Watches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response body contains an array of watches\", () => {",
									"    pm.response.to.have.jsonBody([]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-watches",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-watches"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Watch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Watch_Id\": 1,\n  \"Profile_Id\": 1,\n  \"Media_Id\": 101,\n  \"Watch_Date\": \"2025-01-24\",\n  \"Status\": \"Completed\",\n  \"Pause_Time\": \"2025-01-24T10:00:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-watch-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-watch-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete Watch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-watch-by-id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-watch-by-id",
								"2"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create Watch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Profile_Id\": 1,\r\n  \"Media_Id\": 101,\r\n  \"Status\": \"In Progress\",\r\n  \"Pause_Time\": \"2025-01-24T10:00:00\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-watch",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-watch"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WatchList Endpoints",
			"item": [
				{
					"name": "Get WatchList by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    pm.response.to.have.jsonBody({",
									"        \"WatchList_Id\": 1,",
									"        \"Profile_Id\": 1,",
									"        \"Media_Id\": 101,",
									"        \"Added_Date\": \"2025-01-24\"",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-watchlist-by-id/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-watchlist-by-id",
								"5"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get WatchLists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    pm.response.to.have.jsonBody([]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-watchlists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-watchlists"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update WatchList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"WatchList_Id\": 1,\n  \"Profile_Id\": 1,\n  \"Media_Id\": 101,\n  \"AddedDate\": \"2025-01-24\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-watchlist-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-watchlist-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete WatchList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-watchlist-by-id/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-watchlist-by-id",
								"2"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Create WatchList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Profile_Id\": 1,\r\n  \"Media_Id\": 101\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-watchlist",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-watchlist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account Endpoints",
			"item": [
				{
					"name": "Create Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Account is created successfully\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"Account\");\r",
									"    pm.expect(jsonData.Account).to.have.property(\"Account_Id\");\r",
									"    pm.expect(jsonData.Account).to.have.property(\"Email\");\r",
									"    pm.expect(jsonData).to.have.property(\"ApiKey\");\r",
									"    pm.expect(jsonData.ApiKey).to.be.a(\"string\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Account details are returned correctly\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    const account = jsonData.Account;\r",
									"    pm.expect(account.Account_Id).to.be.a(\"number\");\r",
									"    pm.expect(account.Email).to.be.a(\"string\");\r",
									"    pm.expect(account.Payment_Method).to.be.a(\"string\");\r",
									"    pm.expect(account.Blocked).to.be.a(\"boolean\");\r",
									"    pm.expect(account.Is_Invited).to.be.a(\"boolean\");\r",
									"    pm.expect(account.Trial_End_Date).to.be.a(\"string\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Email\": \"test@example.com\",\r\n  \"Password\": \"Password123\",\r\n  \"Payment_Method\": \"CreditCard\",\r\n  \"Blocked\": false,\r\n  \"Is_Invited\": true,\r\n  \"Trial_End_Date\": \"2025-12-31\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-create-account",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-create-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response is an array\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"Each account has expected properties\", () => {",
									"    const jsonData = pm.response.json();",
									"    jsonData.forEach(account => {",
									"        pm.expect(account).to.have.property(\"Account_Id\");",
									"        pm.expect(account).to.have.property(\"Email\");",
									"        pm.expect(account).to.have.property(\"Payment_Method\");",
									"        pm.expect(account).to.have.property(\"Blocked\");",
									"        pm.expect(account).to.have.property(\"Is_Invited\");",
									"        pm.expect(account).to.have.property(\"Trial_End_Date\");",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-accounts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-accounts"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Update Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Account update is successful\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Account updated successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Account_Id\": 123,                \n    \"Email\": \"saraemail@example.com\", \n    \"Password\": \"NewPassword123\",        \n    \"Payment_Method\": \"DebitCard\"        \n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-update-account-by-id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-update-account-by-id"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get Account by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Account is returned\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Account_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Email\");",
									"    pm.expect(jsonData).to.have.property(\"Payment_Method\");",
									"    pm.expect(jsonData).to.have.property(\"Blocked\");",
									"    pm.expect(jsonData).to.have.property(\"Is_Invited\");",
									"    pm.expect(jsonData).to.have.property(\"Trial_End_Date\");",
									"});",
									"",
									"pm.test(\"AccountId matches the requested ID\", () => {",
									"    const jsonData = pm.response.json();",
									"    const accountId = pm.request.url.variables.accountId;",
									"    pm.expect(jsonData.Account_Id).to.eql(Number(accountId));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-account-by-id/5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-account-by-id",
								"5"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Account by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Account is returned\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Account_Id\");",
									"    pm.expect(jsonData).to.have.property(\"Email\");",
									"    pm.expect(jsonData).to.have.property(\"Payment_Method\");",
									"    pm.expect(jsonData).to.have.property(\"Blocked\");",
									"    pm.expect(jsonData).to.have.property(\"Is_Invited\");",
									"    pm.expect(jsonData).to.have.property(\"Trial_End_Date\");",
									"});",
									"",
									"pm.test(\"Email matches the requested email\", () => {",
									"    const jsonData = pm.response.json();",
									"    const email = pm.request.url.variables.email;",
									"    pm.expect(jsonData.Email).to.eql(email);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5025/stored-procedure-get-account-by-email/jose.test300@hotmail.dk",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-get-account-by-email",
								"jose.test300@hotmail.dk"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is below 1000ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Account and associated API key deleted successfully\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"Message\", \"Account and associated API key deleted successfully.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "api-key",
								"value": "slayslay",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5025/stored-procedure-delete-account/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5025",
							"path": [
								"stored-procedure-delete-account",
								"3"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "accountId",
			"value": "",
			"type": "default"
		}
	]
}